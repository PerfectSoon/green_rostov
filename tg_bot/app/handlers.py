from itsdangerous import URLSafeTimedSerializer, BadSignature
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.deep_linking import decode_payload
from aiogram.filters import CommandStart, CommandObject
import aiohttp
import html
import re
from datetime import datetime
from app.keyboards import main_kb, notifications, generate_task_keyboard,generate_column_task_keyboard
from app.auth import auth, reg

router = Router()


@router.message(CommandStart(deep_link=True))
async def start_with_args(message: Message, command: CommandObject):
    telegram_id = message.from_user.id
    args = command.args
    payload = decode_payload(args)

    print("args", args)
    print("payload", payload)
    
    username = await auth(telegram_id)
    if username:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {username} üëãüèª!", reply_markup=main_kb)
        return
    
    if await reg(payload, telegram_id):
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏ Telegram –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!",reply_markup=main_kb)
        return
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

@router.message(CommandStart())
async def start_without_args(message: Message):
    telegram_id = message.from_user.id
    username = await auth(telegram_id)
    if username:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {username} üëãüèª!", reply_markup=main_kb)
        return
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–∞–π—Ç ")
        return

@router.message(F.text == 'üîñ –ú–æ–∏ –∑–∞–¥–∞—á–∏ üîñ')
async def my_tasks(message: Message):
    telegram_id = message.from_user.id  

    async with aiohttp.ClientSession() as session:
        async with session.get(
            "http://server:8000/api/tasks_tg",  
            params={"telegram_id": telegram_id}  
        ) as response:
            if response.status == 200:
                data = await response.json()
                tasks = data.get("tasks", [])

                if not tasks:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
                else:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
                    column_keyboards = generate_column_task_keyboard(tasks)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
                    for column_name, keyboard in column_keyboards.items():
                        await message.answer(
                            f"üìÇ <b>{column_name}</b>",
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("task_"))
async def show_task_details(callback_query: CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])  

    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://server:8000/api/task_tg/{task_id}") as response:
            if response.status == 200:
                task = await response.json()

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
                task_details = (
                    f"üîñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:</b>\n\n"
                    f"üìÇ –ö–æ–ª–æ–Ω–∫–∞: <i>{task['column_name']}</i>\n"
                    f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{task['title']}</i>\n"
                    f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: <i>{task['description'] if task.get('description') else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</i>\n"
                    f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {datetime.fromisoformat(task['deadline']).strftime('%d.%m.%Y –≤ %H:%M') if task.get('deadline') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                    f"üë§ –ù–∞–∑–Ω–∞—á–∏–ª: <i>{task['author']}</i>\n"

                )
                comments = task.get("comments", [])
                if comments:
                    task_details += "\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n"
                    for comment in comments:
                        author = comment.get("author")
                        date = datetime.fromisoformat(comment["create_date"]).strftime('%d.%m.%Y –≤ %H:%M')
                        text = comment.get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞")
                        task_details += f"üë§ <i>{author}</i> ({date}):\n{text}\n\n"
                else:
                    task_details += "\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
                            
                
                cleaned_text = re.sub(r"<.*?>", "", task_details)

                await callback_query.message.answer(cleaned_text, parse_mode="HTML")
            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    await callback_query.answer()

@router.message(F.text == "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚è∞")
async def notifications_settings(message: Message):
    telegram_id = message.from_user.id

    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://server:8000/api/user/notifications_get/{telegram_id}") as response:
            if response.status == 200:
                data = await response.json()
                current_state = data.get("notifications", True)
                status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if current_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

    await message.answer(
        f"üîî –í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å {status_text}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=notifications
    )

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    telegram_id = callback.from_user.id

    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://server:8000/api/user/notifications_get/{telegram_id}") as response:
            if response.status == 200:
                data = await response.json()
                current_state = data.get("notifications", True)
            else:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                    reply_markup=None
                )
                await callback.answer()
                return

    new_state = not current_state

    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"http://server:8000/api/user/notifications_update/{telegram_id}",
            json={"notifications": new_state}
        ) as response:
            if response.status != 200:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                    reply_markup=notifications
                )
                await callback.answer()
                return

    action = "–≤–∫–ª—é—á–∏–ª–∏" if new_state else "–≤—ã–∫–ª—é—á–∏–ª–∏"
    await callback.message.edit_text(
        f"‚úÖ –í—ã {action} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        reply_markup=notifications
    )

    await callback.answer()
